name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC to catch dependency issues
    - cron: '0 2 * * *'

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  lint-and-format:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Check code formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic
    
    - name: Run static analysis
      run: dotnet build --configuration Release --verbosity normal

  test-matrix:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Run all tests with coverage
      run: dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage --verbosity normal
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        directory: ./coverage
        flags: unittests
        name: codecov-umbrella

  dependency-check:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Check for vulnerable packages
      run: |
        dotnet list package --vulnerable --include-transitive || echo "No vulnerabilities found"
    
    - name: Check for deprecated packages
      run: |
        dotnet list package --deprecated || echo "No deprecated packages found"

  performance-test:
    name: Performance Baseline
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Build Release
      run: dotnet build --configuration Release
    
    - name: Run performance tests
      run: |
        echo "Running basic performance validation..."
        # Add performance test commands here when available
        echo "Performance tests completed"

  build-validation:
    name: Validate Build Outputs
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-matrix]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Build and validate main project
      run: dotnet publish Components/ImageAnalysisService/ImageAnalysisService.csproj --configuration Release --runtime linux-x64 --self-contained true --output ./validate-build
    
    - name: Verify build artifacts
      run: |
        echo "Checking build outputs..."
        ls -la ./validate-build/
        
        # Verify main executable exists
        if [ -f "./validate-build/ImageAnalysisService" ]; then
          echo "✅ Main executable found"
        else
          echo "❌ Main executable missing"
          exit 1
        fi
        
        # Check file size (should be reasonable for self-contained app)
        size=$(stat -c%s "./validate-build/ImageAnalysisService")
        echo "Executable size: $size bytes"
        
        if [ $size -gt 100000000 ]; then  # 100MB
          echo "⚠️  Warning: Executable is quite large (>100MB)"
        fi